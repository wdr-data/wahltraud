import json
import logging
import os
import csv
from threading import Thread

from flask import Flask, request
import requests
import random
import schedule
import time
from django.utils import timezone

from backend.models import Entry, FacebookUser

# Enable logging
logger = logging.getLogger(__name__)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.DEBUG)

logger.info('FB Wahltraud Bot Logging')

PAGE_TOKEN = os.environ.get('WAHLTRAUD_PAGE_TOKEN', 'not set')
HUB_VERIFY_TOKEN = os.environ.get('WAHLTRAUD_HUB_VERIFY_TOKEN', 'not set')

app = Flask(__name__)


@app.route('/testbot', methods=["GET"])
def confirm():
    if request.args['hub.verify_token'] == HUB_VERIFY_TOKEN:
        return request.args['hub.challenge']
    return 'Hello World!'


@app.route('/testbot', methods=["POST"])
def receive_message():
    data = request.json
    handle_messages(data)
    return "ok"


def handle_messages(data):
    """handle all incoming messages"""
    messaging_events = data['entry'][0]['messaging']
    logger.debug(messaging_events)
    for event in messaging_events:
        sender_id = event['sender']['id']
        info_list = list(Entry.objects.all())
        # check if we actually have some input
        if "message" in event and event['message'].get("text", "") != "":
            text = event['message']['text']
            quick_reply = event['message']['quick_reply']['payload']
            if Entry.objects.filter(short_title=text).exists():
                next_info = Entry.objects.get(short_title=text)
                send_text(sender_id, next_info.title)
                if next_info.media != "":
                    image = "https://infos.data.wdr.de:8080/backend/static/media/" + str(next_info.media)
                    send_image(sender_id, image)
                send_info(sender_id, next_info)
            elif quick_reply == "info":
                random_info = get_data()
                send_text(sender_id, random_info.title)
                if random_info.media != "":
                    image = "https://infos.data.wdr.de:8080/backend/static/media/" + str(random_info.media)
                    send_image(sender_id, image)
                send_info(sender_id, random_info)
            elif quick_reply == "subscribe_menue":
                subscribe_process(sender_id)
            elif quick_reply == "subscribe":
                subscribe_user(sender_id)
            elif quick_reply == "unsubscribe":
                unsubscribe_user(sender_id)
            elif quick_reply == "nope":
                reply = "Schade. Vielleicht beim n√§chsten mal..."
                send_text(sender_id, reply)
            else:
                reply = "echo: " + text
                send_text(sender_id, reply)
        elif "postback" in event and event['postback'].get("payload", "") == "start":
            send_greeting(sender_id)
        elif "postback" in event and event['postback'].get("payload", "") == "info":
            random_info = get_data()
            send_text(sender_id, random_info.title)
            if random_info.media != "":
                image = "https://infos.data.wdr.de:8080/backend/static/media/" + str(random_info.media)
                send_image(sender_id, image)
            send_info(sender_id, random_info)
        elif "postback" in event and event['postback'].get("payload", "") == "subscribe_menue" :
            subscribe_process(sender_id)
        elif "postback" in event and event['postback'].get("payload", "") == "impressum":
            reply = "Dies ist ein Produkt des Westdeutschen Rundfunks. Wir befinden uns noch in der Testphase und "\
            "freuen uns √ºber jedes Feedback um uns weiterentwickeln zu k√∂nnen. Danke f√ºr Eure Mithilfe! \n"\
            "Redaktion: Miriam Hochhard - Technische Unterst√ºtzung: Lisa Achenbach, Patricia Ennenbach, Jannes Hoeke"
            send_text(sender_id, reply)

def get_data():
    today = timezone.localtime(timezone.now()).date()
    info_list = list(Entry.objects.all())
    random_info = random.choice(info_list)
    logger.debug('Random Info Title: ' + random_info.title)
    return random_info #Info.objects.filter(pub_date__date=today)[:4]

def subscribe_process(recipient_id):
    text = "Du kannst deine facebook Messenger-ID hinterlegen um automatisch " \
            "Infos zu den wichtigsten Begriffen rund um die Wahl von uns zu erhalten.\n" \
            "Wenn du dich registrieren m√∂chtest klicke \"Anmelden\". \n\n" \
            "Du kannst diese Entscheidung jederzet wieder √§ndern oder jetzt erstmal auf sp√§ter verschieben. " \
            "Wenn du keine automatischen Nachrichten mehr von uns erhalten m√∂chtest klicke \"Abmelden\". \n\n" \
            "Du findest diese Optionen im Men√º unter \"An-/Abmelden\""
    quickreplies = []
    reply_one = {
        'content_type' : 'text',
        'title' : 'Anmelden',
        'payload' : 'subscribe'
    }
    reply_two = {
        'content_type' : 'text',
        'title' : 'Abmelden',
        'payload' : 'unsubscribe'
    }
    reply_three = {
        'content_type' : 'text',
        'title' : 'Sp√§ter vielleicht.',
        'payload' : 'nope'
    }
    quickreplies.append(reply_one)
    quickreplies.append(reply_two)
    quickreplies.append(reply_three)

    send_text_and_quickreplies(text, quickreplies, recipient_id)

def subscribe_user(user_id):
    if FacebookUser.objects.filter(uid = user_id).exists():
        reply = "Du bist bereits f√ºr die automatischen Nachrichten angemeldet."
        send_text(user_id, reply)
    else:
        FacebookUser.objects.create(uid = user_id)
        logger.debug('User with ID ' + str(FacebookUser.objects.latest('add_date')) + ' subscribed.')
        reply = "Danke f√ºr deine Anmeldung! üòÉ\nDu erh√§ltst nun ein t√§gliches Update jeweils um 10:00 Uhr. \n" \
                "Hier ist schonmal deine erst Info..."
        send_text(user_id, reply)
        random_info = get_data()
        send_text(user_id, random_info.title)
        send_info(user_id, random_info)

def unsubscribe_user(user_id):
    if FacebookUser.objects.filter(uid = user_id).exists():
        logger.debug('User with ID ' + str(FacebookUser.objects.get(uid = user_id)) + ' unsubscribed.')
        FacebookUser.objects.get(uid = user_id).delete()
        reply = "Schade, dass du uns verlassen m√∂chtest. Komm gerne wieder, wenn ich dir fehle. üëã\n" \
                "Du wurdest aus der Empf√§ngerliste f√ºr automatische Nachrichten gestrichen."
        send_text(user_id, reply)
    else:
        reply = "Du bist noch kein Nutzer der Push Nachrichten. Wenn du dich anmelden m√∂chtest w√§hle \'Anmelden\' im Men√º " \
                "oder klicke jetzt auf \"Anmelden\"."
        quickreplies = []
        reply_one = {
            'content_type' : 'text',
            'title' : 'Anmelden',
            'payload' : 'subscribe'
        }
        quickreplies.append(reply_one)
        send_text_and_quickreplies(reply, quickreplies, user_id)

def push_notification():
    data = get_data()
    user_list = FacebookUser.objects.values_list('uid', flat=True)
    for user in user_list:
        logger.debug("Send Push to: " + user)
        reply = "Heute haben wir folgendes Thema f√ºr dich:"
        send_text(user, reply)
        send_text(user, data.title)
        if data.media != "":
            image = "https://infos.data.wdr.de:8080/backend/static/media/" + str(data.media)
            send_image(user, image)
        send_info(user, data)

def send_greeting(recipient_id):
    text = "Hallo, ich bin Wahltraud! ü§ñ Ich bin dein pers√∂nlicher Infobot zur Landtagswahl in NRW 2017!\n" \
            "Am 14. Mai sind Landtagswahlen! Darum bin ich f√ºr die n√§chsten Tage dein Guide durch den Wahl-Dschungel. " \
            "Einmal t√§glich f√ºttere ich dich mit einem wichtigen Begriff zur Landtagswahl in NRW und erkl√§re, "\
            "was es damit auf sich hat. \nWenn du genug wei√üt, kannst du mich auch einfach wieder abbestellen. \n\nBis dann!"

    quickreplies = []
    reply_one = {
        'content_type' : 'text',
        'title' : 'Anmelden',
        'payload' : 'subscribe_menue'
    }
    reply_two = {
        'content_type' : 'text',
        'title' : 'Info anzeigen',
        'payload' : 'info'
    }
    quickreplies.append(reply_one)
    quickreplies.append(reply_two)

    send_text_and_quickreplies(text, quickreplies, recipient_id)

def send_info(recipient_id, info):
    text = info.text

    quickreplies = []
    first = {
        'content_type' : 'text',
        'title': info.link_one.short_title,
        'payload': str(info.link_one.short_title)
    }
    quickreplies.append(first)
    if info.link_three == None and info.link_two != None:
        second = {
            'content_type' : 'text',
            'title': info.link_two.short_title,
            'payload': str(info.link_two.short_title)
        }
        quickreplies.append(second)
    elif info.link_three != None and info.link_two != None:
        second = {
            'content_type' : 'text',
            'title': info.link_two.short_title,
            'payload': str(info.link_two.short_title)
        }
        third = {
            'content_type' : 'text',
            'title': info.link_three.short_title,
            'payload': str(info.link_three.short_title)
        }
        quickreplies.append(second)
        quickreplies.append(third)

    send_text_and_quickreplies(text, quickreplies, recipient_id)

def send_text(recipient_id, text):
    """send a text message to a recipient"""
    recipient = {'id': recipient_id}
    message = {'text': text}
    payload = {
        'recipient': recipient,
        'message': message
    }
    send(payload)

def send_image(recipient_id, image_url):
    """send an image to a recipient"""

    recipient = {'id': recipient_id}

    # create an image object
    image = {'url': image_url}

    # add the image object to an attachment of type "image"
    attachment = {
        'type': 'image',
        'payload': image
    }

    # add the attachment to a message instead of "text"
    message = {'attachment': attachment}

    # now create the final payload with the recipient
    payload = {
        'recipient': recipient,
        'message': message
    }
    send(payload)

# def send_audio(recipient_id, audio_file):
#     """send an audio to a recipient"""
#     audio_file = "https://mediandr-a.akamaihd.net/progressive/2017/0302/AU-20170302-0656-0300.mp3"
#
#     recipient = {"id": recipient_id}
#     audio = {'url': audio_file}
#     filedata = '@' + audio_file + ';type=audio/mp3'
#
#     attachment = {
#         'type': 'audio',
#         'payload': audio
#     }
#
#     message = {'attachment': attachment}
#
#     payload = {
#         'recipient': recipient,
#         'message': message,
#         'filedata': filedata
#     }
#     send(payload)

# def send_generic_template(recipient_id, gifts):
#     """send a generic message with title, text, image and buttons"""
#     selection = []
#
#     for key in gifts:
#         logger.debug(key)
#         gift = key
#
#         title = gifts[gift]['title']
#         logger.debug(title)
#         item_url = gifts[gift]['link']
#         image_url = 'http://www1.wdr.de/mediathek/audio/sendereihen-bilder/wdr_sendereihenbild100~_v-Podcast.jpg'
#         subtitle = gifts[gift]['teaser']
#
#         listen_Button = {
#             'type': 'postback',
#             'title': 'ZeitZeichen anh√∂ren',
#             'payload': 'listen_audio#' + item_url
#         }
#         download_Button = {
#             'type': 'web_url',
#             'title': 'ZeitZeichen herunterladen',
#             'url': item_url
#         }
#         visit_Button = {
#             'type': 'web_url',
#             'url': 'http://www1.wdr.de/radio/wdr5/sendungen/zeitzeichen/index.html',
#             'title': 'Zum WDR ZeitZeichen'
#         }
#         share_Button = {
#             'type': 'element_share'
#         }
#         ### Buttons sind auf max 3 begrenzt! ###
#         buttons = []
#         buttons.append(listen_Button)
#         buttons.append(download_Button)
#         buttons.append(share_Button)
#
#         elements = {
#             'title': title,
#             'item_url': item_url,
#             'image_url': image_url,
#             'subtitle': subtitle,
#             'buttons': buttons
#         }
#
#         selection.append(elements)
#
#     load = {
#             'template_type': 'generic',
#             'elements': selection
#         }
#
#     attachment = {
#         'type': 'template',
#         'payload': load
#     }
#
#     message = {'attachment': attachment}
#
#     recipient = {'id': recipient_id}
#
#     payload = {
#         'recipient': recipient,
#         'message': message
#     }
#     send(payload)

def send_text_and_quickreplies(reply, quickreplies, recipient_id):
    message = {
        'text' : reply,
        'quick_replies' : quickreplies
    }

    recipient = {'id': recipient_id}

    payload = {
        'recipient': recipient,
        'message': message
    }
    send(payload)

# def send_text_with_button(recipient_id, info, status="other"):
#     """send a message with a button (1-3 buttons possible)"""
#     buttons = []
#     if status == "info":
#         text = info.text
#         first_button = {
#             'type': 'postback',
#             'title': info.link_one.short_title,
#             'payload': 'next#' + str(info.link_one.short_title)
#         }
#         buttons.append(first_button)
#         if info.link_three == None and info.link_two != None:
#             second_button = {
#                 'type': 'postback',
#                 'title': info.link_two.short_title,
#                 'payload': 'next#' + str(info.link_two.short_title)
#             }
#             buttons.append(second_button)
#         elif info.link_three != None and info.link_two != None:
#             second_button = {
#                 'type': 'postback',
#                 'title': info.link_two.short_title,
#                 'payload': 'next#' + str(info.link_two.short_title)
#             }
#             third_button = {
#                 'type': 'postback',
#                 'title': info.link_three.short_title,
#                 'payload': 'next#' + str(info.link_three.short_title)
#             }
#             buttons.append(second_button)
#             buttons.append(third_button)
#
#     elif status == "other":
#         text = info
#         ok_button = {
#             'type': 'postback',
#             'title': 'OK',
#             'payload': 'subscribe_user'
#         }
#         no_button = {
#             'type': 'postback',
#             'title': 'Nein, danke.',
#             'payload': 'nope'
#         }
#         buttons.append(ok_button)
#         buttons.append(no_button)
#
#     load = {
#             'template_type': 'button',
#             'text': text,
#             'buttons': buttons
#         }
#
#     attachment = {
#         'type': 'template',
#         'payload': load
#     }
#
#     message = {'attachment': attachment}
#
#     recipient = {'id': recipient_id}
#
#     payload = {
#         'recipient': recipient,
#         'message': message
#     }
#     send(payload)

# def send_list_template(infos, recipient_id):
#     """send a generic message with a list of choosable informations"""
#     selection = []
#     count = 0
#
#     for info in infos:
#         count += 1
#         title = info.headline
#         logger.debug(title)
#
#         button = {
#             'type': 'postback',
#             'title': 'Mehr dazu',
#             'payload': 'info#' + str(info.id) + '#' + str(count)
#         }
#         buttons = []
#         buttons.append(button)
#
#         if info.media != "":
#             image = "https://infos.data.wdr.de/backend/static/media/" + str(info.media)
#             elements = {
#                 'title': title,
#                 'image_url': image,
#                 'buttons': buttons
#             }
#         else:
#             elements = {
#                 'title': title,
#                 'buttons': buttons
#             }
#
#         selection.append(elements)
#
#     load = {
#             'template_type': 'list',
#             'top_element_style': 'compact',
#             'elements': selection
#         }
#
#     attachment = {
#         'type': 'template',
#         'payload': load
#     }
#
#     message = {'attachment': attachment}
#
#     recipient = {'id': recipient_id}
#
#     payload = {
#         'recipient': recipient,
#         'message': message
#     }
#     send(payload)


def send(payload):
    """send a payload via the graph API"""
    logger.debug("JSON Payload: " + json.dumps(payload))
    headers = {'Content-Type': 'application/json'}
    requests.post("https://graph.facebook.com/v2.6/me/messages?access_token=" + PAGE_TOKEN,
                  data=json.dumps(payload),
                  headers=headers)


schedule.every().day.at("10:00").do(push_notification)

def schedule_loop():
    while True:
        schedule.run_pending()
        time.sleep(1)

schedule_loop_thread = Thread(target=schedule_loop, daemon=True)
schedule_loop_thread.start()

if __name__ == '__main__':
    app.debug = False
    app.run(port=4444)
